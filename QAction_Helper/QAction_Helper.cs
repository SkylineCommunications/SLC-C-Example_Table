// <auto-generated>This is auto-generated code by DIS. Do not modify.</auto-generated>
using System.ComponentModel;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

namespace Skyline.DataMiner.Scripting
{
public static class Parameter
{
	public class Write
	{
		/// <summary>PID: 50 | Type: write</summary>
		[EditorBrowsable(EditorBrowsableState.Never)]
		public const int btnpopulatetable_50 = 50;
		/// <summary>PID: 50 | Type: write</summary>
		public const int btnpopulatetable = 50;
		/// <summary>PID: 104 | Type: write</summary>
		[EditorBrowsable(EditorBrowsableState.Never)]
		public const int eventsoverviewstatus_104 = 104;
		/// <summary>PID: 104 | Type: write</summary>
		public const int eventsoverviewstatus = 104;
	}
	public class Eventsoverview
	{
		/// <summary>PID: 100</summary>
		public const int tablePid = 100;
		/// <summary>IDX: 0</summary>
		public const int indexColumn = 0;
		/// <summary>PID: 101</summary>
		public const int indexColumnPid = 101;
		public class Pid
		{
			/// <summary>PID: 101 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int eventsoverviewinstance_101 = 101;
			/// <summary>PID: 101 | Type: read</summary>
			public const int eventsoverviewinstance = 101;
			/// <summary>PID: 102 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int eventsoverviewname_102 = 102;
			/// <summary>PID: 102 | Type: read</summary>
			public const int eventsoverviewname = 102;
			/// <summary>PID: 103 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int eventsoverviewstatus_103 = 103;
			/// <summary>PID: 103 | Type: read</summary>
			public const int eventsoverviewstatus = 103;
			public class Write
			{
			}
		}
		public class Idx
		{
			/// <summary>IDX: 0 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int eventsoverviewinstance_101 = 0;
			/// <summary>IDX: 0 | Type: read</summary>
			public const int eventsoverviewinstance = 0;
			/// <summary>IDX: 1 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int eventsoverviewname_102 = 1;
			/// <summary>IDX: 1 | Type: read</summary>
			public const int eventsoverviewname = 1;
			/// <summary>IDX: 2 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int eventsoverviewstatus_103 = 2;
			/// <summary>IDX: 2 | Type: read</summary>
			public const int eventsoverviewstatus = 2;
		}
	}
}
public class WriteParameters
{
	/// <summary>PID: 50  | Type: write | DISCREETS: Populate = 1</summary>
	public System.Object Btnpopulatetable {get { return Protocol.GetParameter(50); }set { Protocol.SetParameter(50, value); }}
	/// <summary>PID: 104  | Type: write | DISCREETS: Pending = 0, Scheduled = 1, Busy = 2, Finished = 3</summary>
	public System.Object Eventsoverviewstatus {get { return Protocol.GetParameter(104); }set { Protocol.SetParameter(104, value); }}
	public SLProtocolExt Protocol;
	public WriteParameters(SLProtocolExt protocol)
	{
		Protocol = protocol;
	}
}
public interface SLProtocolExt : SLProtocol
{
	/// <summary>PID: 100</summary>
	EventsoverviewQActionTable eventsoverview { get; set; }
	object Btnpopulatetable_50 { get; set; }
	object Btnpopulatetable { get; set; }
	object Eventsoverviewinstance_101 { get; set; }
	object Eventsoverviewinstance { get; set; }
	object Eventsoverviewname_102 { get; set; }
	object Eventsoverviewname { get; set; }
	object Eventsoverviewstatus_103 { get; set; }
	object Eventsoverviewstatus { get; set; }
	object Eventsoverviewstatus_104 { get; set; }
	WriteParameters Write { get; set; }
}
public class ConcreteSLProtocolExt : ConcreteSLProtocol, SLProtocolExt
{
	/// <summary>PID: 100</summary>
	public EventsoverviewQActionTable eventsoverview { get; set; }
	/// <summary>PID: 50  | Type: write | DISCREETS: Populate = 1</summary>
	public System.Object Btnpopulatetable_50 {get { return GetParameter(50); }set { SetParameter(50, value); }}
	/// <summary>PID: 50  | Type: write | DISCREETS: Populate = 1</summary>
	public System.Object Btnpopulatetable {get { return Write.Btnpopulatetable; }set { Write.Btnpopulatetable = value; }}
	/// <summary>PID: 101  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Eventsoverviewinstance_101 {get { return GetParameter(101); }set { SetParameter(101, value); }}
	/// <summary>PID: 101  | Type: read</summary>
	public System.Object Eventsoverviewinstance {get { return GetParameter(101); }set { SetParameter(101, value); }}
	/// <summary>PID: 102  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Eventsoverviewname_102 {get { return GetParameter(102); }set { SetParameter(102, value); }}
	/// <summary>PID: 102  | Type: read</summary>
	public System.Object Eventsoverviewname {get { return GetParameter(102); }set { SetParameter(102, value); }}
	/// <summary>PID: 103  | Type: read | DISCREETS: Pending = 0, Scheduled = 1, Busy = 2, Finished = 3</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Eventsoverviewstatus_103 {get { return GetParameter(103); }set { SetParameter(103, value); }}
	/// <summary>PID: 103  | Type: read | DISCREETS: Pending = 0, Scheduled = 1, Busy = 2, Finished = 3</summary>
	public System.Object Eventsoverviewstatus {get { return GetParameter(103); }set { SetParameter(103, value); }}
	/// <summary>PID: 104  | Type: write | DISCREETS: Pending = 0, Scheduled = 1, Busy = 2, Finished = 3</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Eventsoverviewstatus_104 {get { return GetParameter(104); }set { SetParameter(104, value); }}
	public WriteParameters Write { get; set; }
	public ConcreteSLProtocolExt()
	{
		eventsoverview = new EventsoverviewQActionTable(this, 100, "eventsoverview");
		Write = new WriteParameters(this);
	}
}
/// <summary>IDX: 0</summary>
public class EventsoverviewQActionTable : QActionTable, IEnumerable<EventsoverviewQActionRow>
{
	public EventsoverviewQActionTable(SLProtocol protocol, int tableId, string tableName) : base(protocol, tableId, tableName) { }
	IEnumerator IEnumerable.GetEnumerator() { return (IEnumerator) GetEnumerator(); }
	public IEnumerator<EventsoverviewQActionRow> GetEnumerator() { return new QActionTableEnumerator<EventsoverviewQActionRow>(this); }
}
/// <summary>IDX: 0</summary>
public class EventsoverviewQActionRow : QActionTableRow
{
	/// <summary>PID: 101 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Eventsoverviewinstance_101 { get { if (base.Columns.ContainsKey(0)) { return base.Columns[0]; } else { return null; } } set { if (base.Columns.ContainsKey(0)) { base.Columns[0] = value; } else { base.Columns.Add(0, value); } } }
	/// <summary>PID: 101 | Type: read</summary>
	public System.Object Eventsoverviewinstance { get { if (base.Columns.ContainsKey(0)) { return base.Columns[0]; } else { return null; } } set { if (base.Columns.ContainsKey(0)) { base.Columns[0] = value; } else { base.Columns.Add(0, value); } } }
	/// <summary>PID: 102 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Eventsoverviewname_102 { get { if (base.Columns.ContainsKey(1)) { return base.Columns[1]; } else { return null; } } set { if (base.Columns.ContainsKey(1)) { base.Columns[1] = value; } else { base.Columns.Add(1, value); } } }
	/// <summary>PID: 102 | Type: read</summary>
	public System.Object Eventsoverviewname { get { if (base.Columns.ContainsKey(1)) { return base.Columns[1]; } else { return null; } } set { if (base.Columns.ContainsKey(1)) { base.Columns[1] = value; } else { base.Columns.Add(1, value); } } }
	/// <summary>PID: 103 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Eventsoverviewstatus_103 { get { if (base.Columns.ContainsKey(2)) { return base.Columns[2]; } else { return null; } } set { if (base.Columns.ContainsKey(2)) { base.Columns[2] = value; } else { base.Columns.Add(2, value); } } }
	/// <summary>PID: 103 | Type: read</summary>
	public System.Object Eventsoverviewstatus { get { if (base.Columns.ContainsKey(2)) { return base.Columns[2]; } else { return null; } } set { if (base.Columns.ContainsKey(2)) { base.Columns[2] = value; } else { base.Columns.Add(2, value); } } }
	public EventsoverviewQActionRow() : base(0, 3) { }
	public EventsoverviewQActionRow(System.Object[] oRow) : base(0, 3, oRow) { }
	public static implicit operator EventsoverviewQActionRow(System.Object[] source) { return new EventsoverviewQActionRow(source); }
	public static implicit operator System.Object[](EventsoverviewQActionRow source) { return source.ToObjectArray(); }
}
}
